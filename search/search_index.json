{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Self Hosting Company # KubeSail makes self-hosting easy. Self-hosting means running internet software on computers you own. Attach any computer for free or buy one from us . Own your own data, keep your photos private & fix the internet! Get Started : I want to self-host, let\u2019s go! Pibox : Our custom home-hosting hardware Templates : Easily install self-hosted apps Backups : Encrypted backups of your (or your customers) volumes Remote Access : Access your server & apps over the internet FAQ : Frequently Asked Questions For developers # Builder : Deploy your code at home Platform : Sell self-hosted software API Docs : KubeSail API Documentation Isn\u2019t a Self-Hosting Service kind of a contradiction in terms? # If self-hosting is all about breaking free from subscription services, owning your own data, and taking back ownership on the internet, why the heck would anyone sign up for a subscription to self-host!? This is a fantastic question, and one that answers itself as your self-hosting journey unfolds: Fighting Google Photos with Photostructure feels great - but what if your hard drive dies ? Each self-hosted app has different install instructions. We standardize and secure it . Okay, your apps are installed - now how do you get valid and secure encryption ? Hosting apps on the internet isn\u2019t too hard - but what if your ISP blocks web-serving ? Clicking install on other peoples apps is fun and all, but how do I deploy my own code ? Our service aims to provide everything home-hosting is missing. We\u2019re a small startup: your support means the world to us! Checkout our plans and pricing .","title":"Home"},{"location":"#the-self-hosting-company","text":"KubeSail makes self-hosting easy. Self-hosting means running internet software on computers you own. Attach any computer for free or buy one from us . Own your own data, keep your photos private & fix the internet! Get Started : I want to self-host, let\u2019s go! Pibox : Our custom home-hosting hardware Templates : Easily install self-hosted apps Backups : Encrypted backups of your (or your customers) volumes Remote Access : Access your server & apps over the internet FAQ : Frequently Asked Questions","title":"The Self Hosting Company"},{"location":"#for-developers","text":"Builder : Deploy your code at home Platform : Sell self-hosted software API Docs : KubeSail API Documentation","title":"For developers"},{"location":"FAQ/","text":"KubeSail, the Company # What is self hosting? # Self-Hosting means running server software yourself, on computers you own. Although every day billions of people use web browsers, the client side of the internet, almost all the servers they connect to are owned by a handful of the largest software companies in the world. For example, to visit Sarah\u2019s page, you don\u2019t visit Sarah\u2019s computer - you visit Google\u2019s or Facebook\u2019s. Self-Hosting fixes the internet by putting server-software and skills into the hands of everyone. Own your data, cut the expensive hosted subscription services, learn real skills: That\u2019s what self-hosting does! What operating systems does KubeSail support? # KubeSail should work with any Linux operating system that can run a modern version of Kubernetes. We test using Debian 11 and Ubuntu 20.04, and we use Debian 11 for the PiBox\u2019s base operating system. You can even run KubeSail on Windows or Mac via Docker-Desktop or Rancher-Desktop, although we can\u2019t promise it will work properly. If you\u2019re running into issues using KubeSail with any Kubernetes cluster, feel free to join us in chat and we\u2019ll figure it out! What happens to my server if KubeSail goes away? # We\u2019ve actually had this situation in mind since day one. Your server and your data belongs to you , and the only things that would stop working if KubeSail suddenly ceased to exist are: KubeSail.com control panel Remote tunneling (k8g8.com and ksdns.io addresses) Automatic backups Your apps would continue to run and your data would remain on your devices. Each of the services we bundle can be replicated by a handful of other services (for example, we would recommend CloudFlare\u2019s tunneling product and BackBlaze\u2019s backup product), and we\u2019ll work hard to provide guides and tutorials for migration. Does KubeSail still provide enterprise DevOps training? # Yes, although on a limited basis. We\u2019ve pivoted to focus on our self-hosting product, but are still available for select trainings. Please see https://kubesail.com/training for more information. Why do you use Discord if you\u2019re supposed to be a self-hosting company? # We\u2019re not zealots - hosted platforms do have a lot of utility! One of our core values is \u201c Pragmatism over idealism \u201d, and that certainly applies here. While we do plan on migrating to Mastodon one day, we\u2019ve yet to make that jump. Bear with us for our imperfections. Company Values # \ud83e\uddbe Integrity : Don\u2019t be Evil. \ud83d\udc50 Openness : Share everything, with everyone, as much as is reasonable. \ud83d\udc9f Friendliness : Make people happier with code, hardware, and attitudes. \ud83c\udfd7\ufe0f Endurance : Build products to last; stay healthy and happy. It\u2019s a marathon, not a sprint. PiBox, the Product # Is it plug and play? # The model with SSDs pre-installed is plug and play. Otherwise adding a hard drive is a fairly easy step. Our software will setup new drives automatically after you plug them in. Can I access my PiBox on the internet from anywhere? # Yes you can access it anywhere! Our tunneling software keeps your data encrypted all the way to your PiBox, so you can access your apps securely wherever you are. You can also use Kubesail to easily add passwords to apps that don\u2019t have any built in security. Are the apps (Photoprism, NextCloud, etc\u2026) automatically updated? # Software updates are as simple as installing a new app. Just a single click from our App Store. We don\u2019t currently auto update since there may be breaking changes between versions of apps you may want to know about. Does my IP address have to be static for me to access it from the internet? # Your IP does not have to be static. However, if you do want more security, allowing only specific IPs to access your apps is an included feature and is easy to set up. You can securely control which IPs can access your server from anywhere via the KubeSail dashboard. What are the available apps that I can install on the box? # We have an App Store that anyone can publish to at https://kubesail.com/templates . We also maintain a number of \u201cofficial\u201d templates that are known to work well on the PiBox. Are there native back up solution to cloud storage like S3 or backblaze? # One of the major features of our \u201cStandard\u201d plan is that it includes backups to a cloud provider like AWS or BackBlaze. We make it seamless to take backups; your data is first encrypted on your device and then backed up to our cloud servers. This means we can never gain access to your personal data. Electricity cost is annoying in the EU now, how much is the power consumption of PiBox per month with 2 drives? # Max power even under load with 2 drives is 15W, and normally half that while idle. We designed this to be always on and super efficient! How do I check the agent logs if something isn\u2019t working? # On your system, you can checkout the kubesail-agent namespace which contains the agent. You can view the logs with: sudo kubectl -n kubesail-agent logs -l app=kubesail-agent . You might also try running curl -sL https://pibox.io/help.sh | sudo bash to submit a help request. How do I find where my \u201cKubeSail Apps\u201d store data on my pibox? # All KubeSail apps are really Kubernetes apps, an open source tool for which there is a lot of documentation available! We use \u201ck3s\u201d, which stores all of its data at /var/lib/rancher/k3s/storage . In that directory, you\u2019ll find directories that end with titles like \u201cdefault_deluge-config\u201d - which means a disk in the \u201cdefault\u201d namespace named \u201cdeluge-config\u201d. K3s can also be configured to use any other type of disk, but we use simple directories at /var/lib/rancher/k3s/storage by default. What do I do if my certificate isn\u2019t working? # First, check that there aren\u2019t any updates available at https://kubesail.com/clusters . If not, you can try restarting the agent with: sudo kubectl -n kubesail-agent delete pods --all , which should reverify your local certificates. How do I get the PiBox screen working? # See the PiBox docs . If you\u2019re more advanced, you can view all of our \u201cPibox OS\u201d scripts at https://github.com/kubesail/pibox-os/ My \u201c.local.\u201d domains are not working, please help! # Some ISPs, namely Comcast/XFinity, block our \u201clocal.k8g8.com\u201d domains because they\u2019re public DNS names that point at private IP addresses. For more reasons than just to make our domains work, we highly suggest you do not use these DNS providers! Change your workstation or (even better) your Routers DNS configuration to use CloudFlare\u2019s DNS (1.1.1.1) or Google\u2019s DNS (8.8.8.8) . This will both fix our domains, as well as speed up your browsing and increase your privacy.","title":"FAQ"},{"location":"FAQ/#kubesail-the-company","text":"","title":"KubeSail, the Company"},{"location":"FAQ/#pibox-the-product","text":"","title":"PiBox, the Product"},{"location":"api-docs/","text":"Api Docs # Coming soon! If you need to programmatically talk to our API, please reach out to us at support@kubesail.com and we\u2019d be happy to help.","title":"API Docs"},{"location":"api-docs/#api-docs","text":"Coming soon! If you need to programmatically talk to our API, please reach out to us at support@kubesail.com and we\u2019d be happy to help.","title":"Api Docs"},{"location":"backups/","text":"Backups # The KubeSail Agent can backup and restore your Volumes . Restore data between volumes easily! Backups are encrypted on your cluster and uploaded to our AWS S3-backed storage system. New Backup # Under the Resources list, select the PersistentVolumeClaim you\u2019d like to backup. Click \u201cBackup Now\u201d to start a backup job: You can restore this backup to any other volume on any other attached cluster, or restore here by clicking \u201crestore\u201d. Pricing # The number of allowed backups is based on the subscription level of the cluster. See our Pricing page for details. 1 backup is allowed for free 10 backups allowed for \u201cStarter\u201d 30 backups allowed for \u201cTeams\u201d Scheduled backups and API Documentation are on our roadmap, but please join us in chat if you have any feedback or need a more customized installation","title":"Backups"},{"location":"backups/#backups","text":"The KubeSail Agent can backup and restore your Volumes . Restore data between volumes easily! Backups are encrypted on your cluster and uploaded to our AWS S3-backed storage system.","title":"Backups"},{"location":"builder/","text":"Builder # Deploy from GitHub # From the KubeSail dashboard under Repos , click Connect New Repository , and select which repo you want to install the KubeSail DeployBot. You can grant access to selected repositories within the user or organization\u2019s account. Once you grant KubeSail access to a GitHub repository, it appears under Repos within the KubeSail dashboard. Select the newly added repository to view the suggested pipeline. Pick a branch to build and a Kubernetes context from the dropdowns, and then click Build Now . You can view the build logs beneath your pipeline. Once your app successfully builds and deploys, it appears under Apps within the KubeSail dashboard. What does Builder build? # The Builder uses deploy-node-app under the hood, our tool for deploying projects to Kubernetes. The repo builder will prompt you a number of times during the first build to answer some questions about how to build your project. For the simplest use-case, simply create a Dockerfile ! Deployment options # Learn how to deploy simple HTML , Node.js , Python , and Ruby on Rails apps onto Kubernetes. Create a Dockerfile Build and push your Docker image Deploy your app on any Kubernetes cluster A static site # If npx deploy-node-app is called in a directory with nothing but an \u201cindex.html\u201d file, it will still work! An Nginx server with your static site will be generated and ready in a few seconds. Node.js # npx deploy-node-app will generate (if missing) a Dockerfile, build and push deployment images, generate Kubernetes configurations files, and trigger a deployment on your Kubernetes cluster. npx deploy-node-app This tool generates all the boilerplate required for container-based deployments on Kubernetes or Docker . Create a Dockerfile if none exists Create a Kubernetes Deployment or docker-compose.yaml file Automatically map ports from Docker to your Node app Build and push your Docker image Deploy your app on any Kubernetes cluster If you don\u2019t have an existing Node app, KubeSail created create-node-app as an easy way to bootstrap a new app with React, Express, Postgres, and Redis. npx create-node-app my-node-app Python # Create a Dockerfile for Python # Create an image containing your Python application by placing a file called Dockerfile in the root of your project. Update the line with your-daemon-or-script.py . FROM python:3 WORKDIR /usr/src/app COPY requirements.txt ./ RUN pip install --no-cache-dir -r requirements.txt COPY . . CMD [ \"python\" , \"./your-daemon-or-script.py\" ] Then, continue on to build and push your Docker image. Ruby on Rails # Create a Dockerfile for Rails # Create an image containing your Ruby on Rails application by placing a file called Dockerfile in the root of your project. FROM ruby:2.5 RUN apt-get update -qq && apt-get install -y nodejs postgresql-client RUN mkdir /myapp WORKDIR /myapp COPY Gemfile /myapp/Gemfile COPY Gemfile.lock /myapp/Gemfile.lock RUN bundle install COPY . /myapp EXPOSE 3000 # Start the main process. CMD [ \"rails\" , \"server\" , \"-b\" , \"0.0.0.0\" ] Then, continue on to build and push your Docker image. Build your Docker image # Run the following command with username being your Docker Hub username. docker build . -t username/your-image-name docker push username/your-image-name Deploy your app to KubeSail # Once you\u2019ve built your image and pushed to Docker Hub, you can deploy your app to KubeSail. Update the image section of the config below, and then apply your updates using kubectl. apiVersion : apps / v1 kind : Deployment metadata : name : your - app spec : selector : matchLabels : app : your - app replicas : 1 template : metadata : labels : app : your - app spec : containers : - name : your - app image : username / your - image - name imagePullPolicy : Always ports : - name : listen - port containerPort : 8080 resources : requests : cpu : 10 m memory : 128 Mi limits : cpu : 1 memory : 256 Mi","title":"Builder"},{"location":"builder/#builder","text":"","title":"Builder"},{"location":"getting-started/","text":"Getting Started # This guide will step you through the process of self-hosting an app. We\u2019ll use Photostructure as our example app. At the end of the guide, you\u2019ll have a server you own up and running on which you can install apps, host websites, and backup your data. You can use our free-tier and bring your own computer to follow this guide completely for free! 1. Attach a computer to KubeSail # The first question when self-hosting is: What computer am I going to use as my server? I\u2019ll use\u2026 # A PiBox A spare PC I own A Cloud Provider The PiBox is our custom-designed self-hosting hardware. Order a PiBox at pibox.io , plug it in, scan the QR code on the screen, and start self-hosting! See the PiBox documentation for more details! Plug and Play # Plug in Ethernet Plug in Power Toggle the switch located on the power cable Grab a coffee (or just wait about 30 seconds) Scan the QR code on the screen to continue! If for some reason setup fails, please let us know! You can toggle the power to the PiBox in order to get a new QR code. KubeSail works on almost any PC, but we recommend a computer with at least the following: 4GB RAM (8GB recommended) 40GB disk space (80GB+ recommended) Wired internet connection (recommended) a. Install Linux # We recommend Debian 11 , although most Linux distributions should work fine. See the Debian install guide or this tutorial from tecadmin . If you need a hand, our community might be able to help: join discord . b. Install Kubernetes # We recommend k3s which is very easy to install: curl -sfL https://get.k3s.io | sh - c. Attach to KubeSail # Visit the KubeSail Dashboard , click \u201cClusters\u201d, then Add Cluster . Choose \u201cBring your Own\u201d and run the command that begins with kubectl create -f . Your new cluster should appear on the dashboard in a few moments! We have a few guides for various popular cloud providers: AWS Digital Ocean Google Cloud You should be able to use almost any provider of cloud or dedicated servers with KubeSail, so long as your server(s) run Linux and Kubernetes, you should be good. Check the \u201cA spare PC I own\u201d tab for generic setup instructions. 2. Verify Cluster # If you\u2019ve scanned the QR code on your PiBox, you can skip this step, otherwise, choose a name for your server and click Verify Cluster ! This will attach your server to KubeSail. Checkout the core features or just install some apps and get started ! 3. Install an App # Visit the Template Store , where you can browse a selection of easy-to-install self-hosting apps. The majority of the apps in our Template Store are open-source applications, so please remember to support the authors of the apps you like! We plan on offering ways to directly donate to creators you like in the future. Let\u2019s choose Photostructure , a lightweight photo-manager that works great with the KubeSail App . Click Launch Template , wait a moment while the app installs, and you should see a usable URL: Click and link and log-in using the username/password on the Template install page. Without any additional configuration, the KubeSail App will sync your devices photos into Photostructure\u2019s photos Volume, and should appear in the Photostructure interface within a few moments! There are more apps available in the Template Store , and we\u2019re focused on adding more great self-hosted apps as quickly as we can. If you have any requests, please let us know! 4. Congratulations! # Forgive us for the prequel meme. Still - we\u2019ve gotten a lot working under the hood! You now have: A working Google Photos alternative A way to forward internet traffic to your device A platform for hosting websites and apps from home More technically: A valid SSL certificate for your built-in k8g8.com addresses Automatic dynamic DNS via built-in ksdns.io A full Kubernetes cluster If you\u2019ve made it this far, we\u2019d love it if you\u2019d join our community chat on Discord . If discord isn\u2019t your style, your feedback would still be greatly appreciated at support@kubesail.com . We\u2019re a small startup with big plans. Hosting your own photos or recipes or blogs is a small but meaningful step towards repairing the way the internet operates, and we\u2019re truly thankful that you\u2019ve joined us on this journey!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This guide will step you through the process of self-hosting an app. We\u2019ll use Photostructure as our example app. At the end of the guide, you\u2019ll have a server you own up and running on which you can install apps, host websites, and backup your data. You can use our free-tier and bring your own computer to follow this guide completely for free!","title":"Getting Started"},{"location":"getting-started/#1-attach-a-computer-to-kubesail","text":"The first question when self-hosting is: What computer am I going to use as my server?","title":"1. Attach a computer to KubeSail"},{"location":"getting-started/#2-verify-cluster","text":"If you\u2019ve scanned the QR code on your PiBox, you can skip this step, otherwise, choose a name for your server and click Verify Cluster ! This will attach your server to KubeSail. Checkout the core features or just install some apps and get started !","title":"2. Verify Cluster"},{"location":"getting-started/#3-install-an-app","text":"Visit the Template Store , where you can browse a selection of easy-to-install self-hosting apps. The majority of the apps in our Template Store are open-source applications, so please remember to support the authors of the apps you like! We plan on offering ways to directly donate to creators you like in the future. Let\u2019s choose Photostructure , a lightweight photo-manager that works great with the KubeSail App . Click Launch Template , wait a moment while the app installs, and you should see a usable URL: Click and link and log-in using the username/password on the Template install page. Without any additional configuration, the KubeSail App will sync your devices photos into Photostructure\u2019s photos Volume, and should appear in the Photostructure interface within a few moments! There are more apps available in the Template Store , and we\u2019re focused on adding more great self-hosted apps as quickly as we can. If you have any requests, please let us know!","title":"3. Install an App"},{"location":"getting-started/#4-congratulations","text":"Forgive us for the prequel meme. Still - we\u2019ve gotten a lot working under the hood! You now have: A working Google Photos alternative A way to forward internet traffic to your device A platform for hosting websites and apps from home More technically: A valid SSL certificate for your built-in k8g8.com addresses Automatic dynamic DNS via built-in ksdns.io A full Kubernetes cluster If you\u2019ve made it this far, we\u2019d love it if you\u2019d join our community chat on Discord . If discord isn\u2019t your style, your feedback would still be greatly appreciated at support@kubesail.com . We\u2019re a small startup with big plans. Hosting your own photos or recipes or blogs is a small but meaningful step towards repairing the way the internet operates, and we\u2019re truly thankful that you\u2019ve joined us on this journey!","title":"4. Congratulations!"},{"location":"pibox/","text":"PiBox by KubeSail # Designed for simplicity, KubeSail now ships a custom low-cost cluster, pre-installed with Kubernetes and the KubeSail agent. The design is based on the Raspberry Pi 4 Compute Module , includes 2 expandable SATA SSD ports, and costs $299. PiBox is ideal for home and small office use, and makes it easy to take advantage of KubeSail templates and backups. Order now at pibox.io ! About Flashing with rpiboot Operating System GPIO / LED Control Hardware Install KubeSail About the hardware # The PiBox is a storage server that lets you use a standard operating system, runs Kubernetes, and has expandable storage. Designed for home-hosting and for shipping to customers directly, the PiBox is the perfect small NAS! Check out pibox.io for more memory and SSD options. Modular Design # The PiBox uses a Raspberry PI Compute Module 4 , giving you options of 1, 2, 4, or 8GB RAM, optional WiFi, and up to 32GB of onboard flash storage. The compact design includes 2 powered SATA SSD slots allowing for up to 16TB of expandable storage. 5-bay and desktop HDD compatible models are under development and will be coming soon. SSH Login details # The PiBox ships with the default SSH and SMB username/password of \u201cpi\u201d/\u201dkubesail\u201d. You can access SSH with: ssh pi@pibox.local","title":"Overview"},{"location":"pibox/#pibox-by-kubesail","text":"Designed for simplicity, KubeSail now ships a custom low-cost cluster, pre-installed with Kubernetes and the KubeSail agent. The design is based on the Raspberry Pi 4 Compute Module , includes 2 expandable SATA SSD ports, and costs $299. PiBox is ideal for home and small office use, and makes it easy to take advantage of KubeSail templates and backups. Order now at pibox.io ! About Flashing with rpiboot Operating System GPIO / LED Control Hardware Install KubeSail","title":"PiBox by KubeSail"},{"location":"pibox/#about-the-hardware","text":"The PiBox is a storage server that lets you use a standard operating system, runs Kubernetes, and has expandable storage. Designed for home-hosting and for shipping to customers directly, the PiBox is the perfect small NAS! Check out pibox.io for more memory and SSD options.","title":"About the hardware"},{"location":"pibox/#modular-design","text":"The PiBox uses a Raspberry PI Compute Module 4 , giving you options of 1, 2, 4, or 8GB RAM, optional WiFi, and up to 32GB of onboard flash storage. The compact design includes 2 powered SATA SSD slots allowing for up to 16TB of expandable storage. 5-bay and desktop HDD compatible models are under development and will be coming soon.","title":"Modular Design"},{"location":"pibox/#ssh-login-details","text":"The PiBox ships with the default SSH and SMB username/password of \u201cpi\u201d/\u201dkubesail\u201d. You can access SSH with: ssh pi@pibox.local","title":"SSH Login details"},{"location":"platform/","text":"Platform # Platform allows you to turn a container image or Kubernetes YAML into a business in just a few minutes, turning your self-hosted projects into a PaaS! By connecting a Stripe account and choosing a Template , your Platform will be able to accept user payments, spin up resources for customers, and allow those users to manage certain settings such as Environment Variables. With easy upgrades and payment processing options, KubeSail Platform is the fastest and easiest way to go from a container image to a business. Create a new Platform # Click \u201cNew Platform\u201d and enter a name. Note that must be unique across all of KubeSail, and will be shown to your users when they sign-up! Step 1: Connect Stripe # Customer\u2019s resources will be launched when they complete a payment. Payments are handled by Stripe and are processed through your account, which gives you complete control and transparency over the billing process and the status of your customers. A KubeSail fee will be added to each payment automatically, which can also be seen in your Stripe account. Step 2: Upload a logo # Upload your logo, which will be visible on the Customer Billing Portal . It\u2019s a good idea to use your main company logo here, so your users feel comfortable that they\u2019re in the right place! Step 3: Setting a price # Set a name and a monthly price for this Plan. This will be displayed to your customers in the Customer Billing Portal . Step 4: Where to deploy # When customers make a payment, their resources will need to be provisioned somewhere! KubeSail Platform makes this flexible and powerful, by allowing you a number of options: Use Existing Cluster : If you already have a Cluster attached to KubeSail, you can use it immediately. Please note that some precaution with regards to security is important here, but this choice is perfect for experts who are ready to manage their own Clusters. Ship a Pibox : We\u2019re building pibox.io , which is a shippable Cluster-In-A-Box. These tiny systems can be pre-provisioned with a Template when a user makes a payment, and shipped directly to them! Perfect for easy on-prem deployments and other IoT purposes! Cluster-per-Customer : This option allows you to provision a private cluster for each customer who registers. This option is most useful for Enterprise offerings, for customers with more strict security tolerances, or in situations where a Template may need a huge amount of resources. Order a Managed Cluster : With this option, KubeSail experts will build a custom cluster for your Platform. We will handle cluster issues, monitoring, respond to alarms, and more! This is perfect if you\u2019re a developer who wants to focus on your software, and not on running the Platform. For options 2 , 3 and 4 , we strongly recommend reaching out to us at support@kubesail.com so we can get things dialed in perfectly! Step 5: Choose a Template # When a user completes a Payment, a Template will be launched in a namespace created for that user. Note that customers will only be able to access their resources if an Ingress Object is defined in the template. Step 6: Template Variables # Variables from your Template are visible here, and can be modified to be Visible or Required , as well as setting a default Value. Visible variables are displayed to your customers in the customer-portal as a settings portal. This allows customers to set their own Required variables must be completed by your customers before the Template will be launched. They\u2019re non-optional. You can also set Default values, helper functions (like RANDOM to generate a random string), or human-friendly descriptions in your Template. See the Template docs for more information. Customer Portal # You can set the \u201cPortal Domain\u201d in your Platform which is the domain where Customers can sign up. A pre-hosted Customer Portal will be registered for you at PLATFORM_NAME.kubesail.app , which is a hosted instance of this repo . Feel free to fork and customize that repo if you\u2019d like to customize your Customer sign up experience. We\u2019re working on API documentation for further customization as well - please drop us a message at support@kubesail.com if you\u2019re interested!","title":"Platform"},{"location":"platform/#platform","text":"Platform allows you to turn a container image or Kubernetes YAML into a business in just a few minutes, turning your self-hosted projects into a PaaS! By connecting a Stripe account and choosing a Template , your Platform will be able to accept user payments, spin up resources for customers, and allow those users to manage certain settings such as Environment Variables. With easy upgrades and payment processing options, KubeSail Platform is the fastest and easiest way to go from a container image to a business.","title":"Platform"},{"location":"templates/","text":"Templates # Templates allow you to easily install and share applications. Templates can be shared with others, re-used on your clusters, and used to create a Platform to resell your software! Check out our Official templates or see all public templates to get started! Creating a new Template # Visit https://kubesail.com/template/new . Getting started # Choose \u201cStart with a Docker image\u201d if you have a public Docker image you\u2019d like to use - we\u2019ll automatically generate most of the Kubernetes configuration you\u2019ll need! Choose \u201cAdd a Deployment\u201d to see a minimal example of a Kubernetes Deployment Choose \u201cEdit YAML\u201d to open the built-in YAML Editor Public / Private # When you first save your new template, you can choose public or private . Public templates are visible to everyone - Be careful not to include sensitive information! Private templates are only visible to you and members of your organization Adding resources # You can add common Kubernetes resources using the \u201d+\u201d icon in the Editor. Editing resources # You can use the YAML editor on the right to create any custom resource you\u2019d like. However, for most common resource-types, you can also click on the resource on the left and use more friendly tools to modify the resources: Template Variables # You can create special variables that will require user-input before launching. This is very useful for configuration that will need to be different for each user who installs this template. Variables are formatted like \"{{ VARIABLE_NAME }}\" . Variables must be quoted, and can only be strings. Creating a variable will automatically add the \u201cEnvironment Variable\u201d panel to the left-hand side: Environment variables can also be upgraded a bit to help users by giving them defaults and descriptions about how they should be used. The format is: \" {{ VARIABLE_NAME | default value or function | Description | Friendly name }} \" You can also use RANDOM(length) as a default value to generate random strings such as passwords: Variables which have no default value -must- be completed by a user before the Template can be launched. As always, please let us know in our discord channel if you have any questions or if you need a hand building an awesome template! Special Variables # Several variables, like {{ CLUSTER_ADDRESS }} are automatically replaced with contextual information that can be useful when creating well formed templates. For example, official templates typically include an Ingress which uses a default address like app-name.{{ CLUSTER_ADDRESS }} . Some others are available: Variable Replaced With NAMESPACE The name of the users current namespace, ie: \u2018default\u2019 USERNAME The KubeSail user\u2019s username CLUSTER_ADDRESS The address of the current cluster, ie: \u2018pasadena.erulabs.usw1.k8g8.com\u2019 LOCAL_CLUSTER_ADDRESS The \u2018local\u2019 address of the current cluster, ie: \u2018pasadena.erulabs.local.k8g8.com\u2019 (used for LAN access) TZ The timezone of the users browser HTACCESS_USERNAME Used as a special input variable for the HTACCESS_AUTH() function. See deluge for an example. HTACCESS_PASSWORD Same as HTACCESS_USERNAME, but, the password. Variable Functions # Like special variables, variable functions can be used to create healthy defaults for users. The most commonly used is {{ RANDOM(32) }} , which generates a random 32-character string, useful for passwords and tokens. Others are available: Variable Replaced With RANDOM(length) Random, url-safe string of size \u2018length\u2019 SRANDOM(length) Random, json-safe string of size \u2018length\u2019 HEX(length) Random, hex-encoded string of size \u2018length\u2019 HTACCESS_AUTH Used to generate a valid htaccess document. See deluge for an example. Many of these functions have been added by request. Please let us know in discord if you have an idea for another useful one!","title":"Templates"},{"location":"templates/#templates","text":"Templates allow you to easily install and share applications. Templates can be shared with others, re-used on your clusters, and used to create a Platform to resell your software! Check out our Official templates or see all public templates to get started!","title":"Templates"},{"location":"tunneling/","text":"Tunneling # Tunneling and DNS services allow internet traffic to reach your clusters. Tunneling # The KubeSail Agent automatically maintains a secure tunnel between your cluster and the KubeSail Gateway, bypassing any firewalls and allowing simple and reliable access to your apps: You\u2019ll be able to access your cluster with a domain like \u201cmycluster.username.region. k8g8.com \u201d. All k8g8.com domains are tunneled: the traffic is sent through our gateway system and routed to the Agent on your cluster. This is perfect for home-hosting, IoT and simple use-cases where the cluster may move or have an unreliable connection to the internet or are behind a firewall. Dynamic DNS # The KubeSail Agent will also periodically set a Dynamic DNS address. An address like \u201cmycluster.username.region. ksdns.io \u201d will resolve to your cluster\u2019s IP address. All ksdns.io domains use Dynamic DNS. Make sure your firewall is configured properly! This is useful for non-HTTP services such a game-servers and voice applications. Direct Access # If you\u2019re a home user, make sure to set or correct your PiBoxes local address at https://kubesail.com/clusters/ under \u201csettings\u201d. Our agent will try its best to automatically set that value, otherwise you can set it yourself. This address will be used to set DNS records automatically for *.cluster_name.user_name.region.k8g8.com . When you\u2019re accessing the dashboard from the same network as your cluster, the Launch button will automatically direct you to the local version of your app! For heavier traffic situations or when using a Cloud Provider, you may want to directly access your cluster via a Load Balancer - This works normally and would bypass the KubeSail agent and connect directly to your Ingress controller. Schedule a chat with us and we can help design a solution! Assuming the dashboard is totally offline, you can also access your applications directly via their service address and port. You can use kubectl get services to see these addresses. Warning: Your firewall configuration may not allow you to reach these addresses! You may need to use a command like kubectl port-forward to export the port. Custom domains # You can expose your running containers under your own hostname, such as home.example.com rather than under the generated k8g8.com / ksdns.io hostnames. Add as many domains as you\u2019d like by verifying your domain in the dashboard. Use a CNAME or ALIAS record, say home.example.com , which points at either your Tunneled or Dynamic DNS Addresses. Tunneling Details # The Agent and Gateway maintain a persistent connection, which is used to tunnel HTTP and HTTPS requests from the Gateway to the Agent. All KubeSail Gateway addresses end with k8g8.com . When an HTTPS request is received by the Gateway, we inspect the SNI header packets to determine the hostname and pass the encrypted request (we don\u2019t have the certificate!) to your KubeSail Agent, which in turn routes the request to your Ingress Controller. See kubesail/kubesail-agent for more info! HTTP traffic is also forwarded, based on the HOST header. HTTPS & Certificates # You\u2019ll need to make sure you\u2019ve installed cert-manager . You can install it with: kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.3.0/cert-manager.yaml To receive Certificates , you\u2019ll need a ClusterIssuer and an Ingress object. ClusterIssuer # A ClusterIssuer is a Document that tracks an account with Let\u2019s Encrypt, which will allow you to Order a Certificate . See the docs for more. A ClusterIssuer called \u201cletsencrypt\u201d should be automatically created by the KubeSail agent - as long as this exists you should be good to go! Ingress # An Ingress object routes HTTP/HTTPS traffic to a Service based on a hostname. These documents are automatically read by the KubeSail Agent. If you create an Ingress for any domains verified in your Domains portal , traffic will be passed from the Gateway to the Agent. Also note the tls section, which will cause a Certificate to be created automatically! apiVersion : networking.k8s.io/v1beta1 kind : Ingress metadata : name : domain-ingress spec : rules : - host : test.mywebsite.com http : paths : - backend : serviceName : my-app servicePort : 8080 tls : - hosts : - test.mywebsite.com secretName : mywebsite-cerfificate","title":"Remote Access"},{"location":"tunneling/#tunneling","text":"Tunneling and DNS services allow internet traffic to reach your clusters.","title":"Tunneling"},{"location":"guides/aws/","text":"AWS Kubernetes Cluster # Managed # KubeSail offers completely managed clusters in your AWS account via sub-accounts. Schedule a chat with us and we can build and manage your customer cluster on AWS. Unmanaged Guides # Build using eksctl (recommended) Build using AWS Console Build using KubeSpray (advanced) Attach Cluster to KubeSail # If you\u2019ve used eksctl , you should be ready to use your cluster using kubectl automatically. You can check by running a command like: kubectl get nodes to ensure your cluster is healthy. To attach your cluster to KubeSail, visit the Clusters portal and click Add cluster , or simply run: kubectl create -f https://byoc.kubesail.com/<USERNAME>.yaml You should see the cluster appear in the clusters panel. Give it a name and click Verify Cluster : Use Cluster with KubeSail Platform # After creating a Platform , click on the Cluster line and select the cluster you want apps deployed to. Your verified cluster should show up in the list! When customers pay through the customer portal, they will now have their apps deployed in new namespaces on this cluster. Use the Customers tab to view and manage them.","title":"Attach AWS"},{"location":"guides/aws/#aws-kubernetes-cluster","text":"","title":"AWS Kubernetes Cluster"},{"location":"guides/bare-metal/","text":"Local / Bare Metal clusters # KubeSail is designed to work with any Kubernetes cluster, including bare metal and development boxes. This guide covers setting up a PiBox or Docker for Desktop for running Kubernetes apps locally. PiBox - Custom Hardware, Shipping Soon # Designed for simplicity, KubeSail now ships a custom low-cost cluster, pre-installed with Kubernetes and the KubeSail agent. The design is based on the Raspberry Pi Compute Module 4, includes 2 expandable SATA SSD ports, and costs $250. PiBox is ideal for home and small office use, and makes it simple to take advantage of 1-click installable KubeSail templates and backups. Pre-order one now on Kickstarter or learn more at pibox.io . Docker for Desktop # Docker Desktop for Mac and Windows now ships with Kubernetes, making it the simplest way to get a development cluster online. After enabling Kubernetes in the Docker Desktop settings panel, visit the Clusters portal and click Add cluster , or simply run: kubectl create -f https://byoc.kubesail.com/<USERNAME>.yaml","title":"Local / Bare Metal clusters"},{"location":"guides/bare-metal/#local-bare-metal-clusters","text":"KubeSail is designed to work with any Kubernetes cluster, including bare metal and development boxes. This guide covers setting up a PiBox or Docker for Desktop for running Kubernetes apps locally.","title":"Local / Bare Metal clusters"},{"location":"guides/bare-metal/#pibox-custom-hardware-shipping-soon","text":"Designed for simplicity, KubeSail now ships a custom low-cost cluster, pre-installed with Kubernetes and the KubeSail agent. The design is based on the Raspberry Pi Compute Module 4, includes 2 expandable SATA SSD ports, and costs $250. PiBox is ideal for home and small office use, and makes it simple to take advantage of 1-click installable KubeSail templates and backups. Pre-order one now on Kickstarter or learn more at pibox.io .","title":"PiBox - Custom Hardware, Shipping Soon"},{"location":"guides/bare-metal/#docker-for-desktop","text":"Docker Desktop for Mac and Windows now ships with Kubernetes, making it the simplest way to get a development cluster online. After enabling Kubernetes in the Docker Desktop settings panel, visit the Clusters portal and click Add cluster , or simply run: kubectl create -f https://byoc.kubesail.com/<USERNAME>.yaml","title":"Docker for Desktop"},{"location":"guides/digital-ocean/","text":"Digital Ocean Kubernetes Cluster # Managed # KubeSail offers completely managed clusters in your Digital Ocean account. Schedule a chat with us and we can build and manage your customer cluster. Creating a new Cluster # Select \u201cKubernetes\u201d from the Create dropdown button in the Digital Ocean dashboard. The default options are ok in most cases. The cluster will take a few minutes to spin up. You will most likely want to add Autoscaling to handle increased load as more of your customers sign up. This is done in the Nodes tab, by configuring the settings of the node pool. Attach Cluster to KubeSail # Under the \u201cOverview\u201d tab, you can download your kubectl config file in order to access your cluster via the command line. Download this file and move it to ~/.kube/config . You can create the ~/.kube directory if it does not yet exist. You can check that you have access and ensure your cluster is healthy by running a command like: kubectl get nodes . To attach your cluster to KubeSail, visit the Clusters portal and click Add cluster , or simply run: kubectl create -f https://byoc.kubesail.com/<USERNAME>.yaml You should see the cluster appear in the clusters panel. Give it a name and click Verify Cluster : Use Cluster with KubeSail Platform # After creating a Platform , click on the Cluster line and select the cluster you want apps deployed to. Your verified cluster should show up in the list! When customers pay through the customer portal, they will now have their apps deployed in new namespaces on this cluster. Use the Customers tab to view and manage them.","title":"Attach Digital-Ocean"},{"location":"guides/digital-ocean/#digital-ocean-kubernetes-cluster","text":"","title":"Digital Ocean Kubernetes Cluster"},{"location":"guides/gke/","text":"Google Cloud Kubernetes Cluster # Managed # KubeSail offers completely managed clusters in your Google Cloud account. Schedule a chat with us and we can build and manage your customer cluster. Creating a new Cluster # Select \u201cKubernetes Engine\u201d -> \u201cClusters\u201d from the main menu. Select \u201cCreate\u201d from the dropdown. KubeSail works with either cluster mode, but we recommend \u201cAutopilot\u201d in most cases. Select \u201cConfigure\u201d and then \u201cCreate\u201d on the next page. The default options for the cluster are fine. The cluster will take a few minutes to spin up. Attach Cluster to KubeSail # To connect your new cluster to KubeSail, you will need to install the KubeSail Agent. This can be done by clicking the \u201cConnect\u201d button in the main cluster settings page. Once the shell opens, hit the \u201cEnter\u201d key to run the pre-filled command, and the shell will fetch credentials for accessing your cluster. You will need to authorize access. Once this completes, you can install the KubeSail agent by running kubectl create -f https://byoc.kubesail.com/<USERNAME>.yaml and replacing <USERNAME> with your KubeSail username. You should see the cluster appear in the the Clusters portal . Give it a name and click Verify Cluster : Use Cluster with KubeSail Platform # After creating a Platform , click on the Cluster line and select the cluster you want apps deployed to. Your verified cluster should show up in the list! When customers pay through the customer portal, they will now have their apps deployed in new namespaces on this cluster. Use the Customers tab to view and manage them.","title":"Attach GKE"},{"location":"guides/gke/#google-cloud-kubernetes-cluster","text":"","title":"Google Cloud Kubernetes Cluster"},{"location":"guides/pibox/display/","text":"Front Panel LCD Display # The PiBox includes a 1.3\u201d front-panel LCD display. By default, it shows the PiBox\u2019s local IP, current CPU, Disk, and Network utilization, and temperature. However, it can be customized to show any sort of information or graphics you wish to display. 2x12 pinout: https://learn.adafruit.com/adafruit-mini-pitft-135x240-color-tft-add-on-for-raspberry-pi/pinouts","title":"Front Panel LCD Display"},{"location":"guides/pibox/display/#front-panel-lcd-display","text":"The PiBox includes a 1.3\u201d front-panel LCD display. By default, it shows the PiBox\u2019s local IP, current CPU, Disk, and Network utilization, and temperature. However, it can be customized to show any sort of information or graphics you wish to display. 2x12 pinout: https://learn.adafruit.com/adafruit-mini-pitft-135x240-color-tft-add-on-for-raspberry-pi/pinouts","title":"Front Panel LCD Display"},{"location":"guides/pibox/gpio/","text":"GPIO / LED control # The PiBox has a single RGB LED on the front panel (the top unlabeled LED) that is user controllable via 3 separate GPIO using a variety of languages. Pinout # GPIO Pin Function GPIO 17 Red LED GPIO 27 Green LED GPIO 23 Blue LED Controlling with Bash # The following example turns the Red LED on for 1 second, then off # First make the GPIO pin accessible in user space echo \"17\" > /sys/class/gpio/export # Set the GPIO pin as an output echo \"out\" > /sys/class/gpio/gpio17/direction # Turn the LED ON, wait 1 second, then OFF echo \"1\" > /sys/class/gpio/gpio17/value sleep 1 echo \"0\" > /sys/class/gpio/gpio17/value Controlling with Python # First, install the RPi.GPIO library. sudo pip3 install RPi.GPIO The following example toggles the Red channel of the RGB LED once every second, ten times import RPi.GPIO as GPIO import time led = 17 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( led , GPIO . OUT ) for i in range ( 10 ): GPIO . output ( led , GPIO . HIGH ) time . sleep ( 0.5 ) GPIO . output ( led , GPIO . LOW ) time . sleep ( 0.5 ) GPIO . cleanup ()","title":"GPIO / LED Control"},{"location":"guides/pibox/gpio/#gpio-led-control","text":"The PiBox has a single RGB LED on the front panel (the top unlabeled LED) that is user controllable via 3 separate GPIO using a variety of languages.","title":"GPIO / LED control"},{"location":"guides/pibox/gpio/#pinout","text":"GPIO Pin Function GPIO 17 Red LED GPIO 27 Green LED GPIO 23 Blue LED","title":"Pinout"},{"location":"guides/pibox/gpio/#controlling-with-bash","text":"The following example turns the Red LED on for 1 second, then off # First make the GPIO pin accessible in user space echo \"17\" > /sys/class/gpio/export # Set the GPIO pin as an output echo \"out\" > /sys/class/gpio/gpio17/direction # Turn the LED ON, wait 1 second, then OFF echo \"1\" > /sys/class/gpio/gpio17/value sleep 1 echo \"0\" > /sys/class/gpio/gpio17/value","title":"Controlling with Bash"},{"location":"guides/pibox/gpio/#controlling-with-python","text":"First, install the RPi.GPIO library. sudo pip3 install RPi.GPIO The following example toggles the Red channel of the RGB LED once every second, ten times import RPi.GPIO as GPIO import time led = 17 GPIO . setmode ( GPIO . BOARD ) GPIO . setup ( led , GPIO . OUT ) for i in range ( 10 ): GPIO . output ( led , GPIO . HIGH ) time . sleep ( 0.5 ) GPIO . output ( led , GPIO . LOW ) time . sleep ( 0.5 ) GPIO . cleanup ()","title":"Controlling with Python"},{"location":"guides/pibox/hardware/","text":"Hacker Bundle Guide & Hardware List # The PiBox hardware components can be purchased individually and assembled as a DIY kit. This page will help you source components if you decide to purchase the \u201cHacker Bundle\u201d. Assembly Video # After assembly, follow the rpiboot flashing instructions Choosing a Metal or 3D Printed Case # If you choose to 3D print your case, you can download the latest version of STL print files from GitHub . We are currently manufacturing a large quantity of metal cases, and will be making our these available for sale individually on pibox.io once we have adequate inventory. 5V PWM Fan # For best results, we recommend using a 40mm 5V PWM fan, such as the Noctua NF-A4x10 . Any 40x40x10mm fan will work, although 12v fans will likely not spin at high enough RPMs to keep your Pi adequetly cool, and your CPU may throttle down. PWM is not necessary, but if you do use a PWM fan, it will stay much quieter since your Pi typically does not need much cooling. 1.3\u201d LCD Screen # LCD screens are included in every bundle. If you need a replacement, you can buy a bare screen from Adafruit . Backplane and Carrier Boards & Power Supply # The Backplane and Carrier boards are now available on pibox.io as the \u201cHacker PiBox\u201d. This kit includes a metal case and the correct 17.5W Power Supply for your country. WiFi Antenna # The official CM4 antenna can be purchased for $5 from CanaKit or PiShop , but may require expensive shipping. Unofficial antennas can also be purchased from Amazon with free shipping. SSDs # Crucial offers affordable solid state drives in 1TB and 2TB capacities. Drives up to 4TB and 8TB are also available from Samsung.","title":"Hardware"},{"location":"guides/pibox/hardware/#hacker-bundle-guide-hardware-list","text":"The PiBox hardware components can be purchased individually and assembled as a DIY kit. This page will help you source components if you decide to purchase the \u201cHacker Bundle\u201d.","title":"Hacker Bundle Guide &amp; Hardware List"},{"location":"guides/pibox/hardware/#assembly-video","text":"After assembly, follow the rpiboot flashing instructions","title":"Assembly Video"},{"location":"guides/pibox/hardware/#choosing-a-metal-or-3d-printed-case","text":"If you choose to 3D print your case, you can download the latest version of STL print files from GitHub . We are currently manufacturing a large quantity of metal cases, and will be making our these available for sale individually on pibox.io once we have adequate inventory.","title":"Choosing a Metal or 3D Printed Case"},{"location":"guides/pibox/hardware/#5v-pwm-fan","text":"For best results, we recommend using a 40mm 5V PWM fan, such as the Noctua NF-A4x10 . Any 40x40x10mm fan will work, although 12v fans will likely not spin at high enough RPMs to keep your Pi adequetly cool, and your CPU may throttle down. PWM is not necessary, but if you do use a PWM fan, it will stay much quieter since your Pi typically does not need much cooling.","title":"5V PWM Fan"},{"location":"guides/pibox/hardware/#13-lcd-screen","text":"LCD screens are included in every bundle. If you need a replacement, you can buy a bare screen from Adafruit .","title":"1.3\" LCD Screen"},{"location":"guides/pibox/hardware/#backplane-and-carrier-boards-power-supply","text":"The Backplane and Carrier boards are now available on pibox.io as the \u201cHacker PiBox\u201d. This kit includes a metal case and the correct 17.5W Power Supply for your country.","title":"Backplane and Carrier Boards &amp; Power Supply"},{"location":"guides/pibox/hardware/#wifi-antenna","text":"The official CM4 antenna can be purchased for $5 from CanaKit or PiShop , but may require expensive shipping. Unofficial antennas can also be purchased from Amazon with free shipping.","title":"WiFi Antenna"},{"location":"guides/pibox/hardware/#ssds","text":"Crucial offers affordable solid state drives in 1TB and 2TB capacities. Drives up to 4TB and 8TB are also available from Samsung.","title":"SSDs"},{"location":"guides/pibox/kubesail/","text":"Install KubeSail # KubeSail helps you manage software on your PiBox, or any other computer running Kubernetes. If you don\u2019t yet have a KubeSail account, creating one is as easy as signing up with GitHub . Once you\u2019ve done that, install the setup script: curl -s https://raw.githubusercontent.com/kubesail/pibox-os/main/setup.sh | sudo bash Then scan the QR code on the screen or checkout the kubesail-agent logs for the verification link! If checking the PiBox screen isn\u2019t easy, you can use: sudo kubectl -n kubesail-agent logs -l app=kubesail-agent to look for the verification link as well.","title":"Install KubeSail"},{"location":"guides/pibox/kubesail/#install-kubesail","text":"KubeSail helps you manage software on your PiBox, or any other computer running Kubernetes. If you don\u2019t yet have a KubeSail account, creating one is as easy as signing up with GitHub . Once you\u2019ve done that, install the setup script: curl -s https://raw.githubusercontent.com/kubesail/pibox-os/main/setup.sh | sudo bash Then scan the QR code on the screen or checkout the kubesail-agent logs for the verification link! If checking the PiBox screen isn\u2019t easy, you can use: sudo kubectl -n kubesail-agent logs -l app=kubesail-agent to look for the verification link as well.","title":"Install KubeSail"},{"location":"guides/pibox/os/","text":"Using a custom Linux OS on your PiBox # We maintain and distribute a modified 64-bit Raspberry Pi OS image which is pre-configured to be perfect for the PiBox. The rest of this page contains the instructions for making those modifications yourself if you decide to reflash your PiBox . In general, the modifications we make are: Fan support (PWM) for quiet fan operation SATA Kernel modules Install Kubernetes (via K3s ) Tweaks for stability and performance Display kernel modules for the 1.3\u201d front panel display If you\u2019re using our OS Image, this guide has already been completed for you ! You can also start with the base 64-bit Raspberry Pi image from https://downloads.raspberrypi.org/raspios_arm64 Dedicating an SSD to Kubernetes # Important We recommend using one or more SSDs for your Kubernetes installation and storage. You\u2019ll want to format a disk and mount it at /var/snap before installing Kubernetes. This storage can then be used by Kubernetes for it\u2019s storage system. This piece is optional, but we strongly recommend it! Danger If you\u2019ve already installed K3s, please first uninstall with /usr/local/bin/k3s-uninstall.sh Take a look to see if your disks have been detected: lsblk | fgrep disk - if not, try updating the OS with apt update && apt upgrade and restart. If you still don\u2019t see your disks, see the \u201cEnabling the SATA Kernel Module\u201d section below. # Format the entire /dev/sda disk (WARNING! This will wipe data!) sudo parted -a opt /dev/sda mkpart primary ext4 0 % 100 % # Format the partition sudo mkfs.ext4 -L kubernetesdata /dev/sda1 # Mount the partition in place! K3s usually lives at \"/var/lib/rancher\", whereas microk8s uses \"/var/snap\" sudo mkdir -p /var/lib/rancher sudo bash -c \"echo '/dev/sda1 /var/lib/rancher ext4 defaults,nofail,noatime,discard,errors=remount-ro 0 0' >> /etc/fstab\" Install K3s # K3s is our preferred Kubernetes distribution. It\u2019s maintained by Rancher, is updated regularly, and performs well on low-power devices, such as Raspberry Pis. Other distributions of Kubernetes should work fine on the PiBox and with KubeSail.com, but this guide focuses on K3s. We recommend K3s over Microk8s because of its dramatically reduced resource requirements as of the time of writing (11/1/2021) # On Raspberry PI OS, the path is /boot/cmdline.txt, on Ubuntu it's /boot/firmware/cmdline.txt # TLDR: Add 'cgroup_enable=memory cgroup_memory=1' to that file and reboot sudo bash -c \"grep -qxF 'cgroup_enable=memory cgroup_memory=1' /boot/cmdline.txt || sed -i 's/ $ / cgroup_enable=memory cgroup_memory=1/' /boot/cmdline.txt\" sudo reboot # Install K3s - see https://k3s.io/ for more curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL = latest sh - Enabling PWM Fan Support # The PiBox emits a PWM control signal so the fan only spins as fast as necessary. This makes it quieter than even the Official Raspberry Pi Case fan, and keeps the CPU from experiencing large temperature swings, which should lead to longer CPU life for your Pi. Typically this is done via a dedicated controller chip, however due to the ongoing chip shortage these chips are not possible to source. But thanks to some clever code from alwynallan on GitHub, we are able to ship a silent PiBox now, with no delays. This code can be found in our fork of alwynallan \u2018s original gist on GitHub. git clone https://github.com/kubesail/pibox-os.git cd pibox-os/pwm-fan tar zxvf bcm2835-1.68.tar.gz cd bcm2835-1.68 ./configure && make && sudo make install cd .. make && sudo make install Stress Test Data # Enable USB (Raspberry Pi OS only) # If you are using Raspberry Pi OS, you will need to enable the USB 2.0 ports on the Compute Module 4. Edit the boot config file at /boot/config.txt and add: dtoverlay=dwc2,dr_mode=host Enabling the SATA Kernel Module # Important Raspberry Pi OS will soon ship the SATA modules by default. Use apt update && apt upgrade to upgrade! You may want to see if your disks are already detected ( lsblk | fgrep disk ) before building these modules, which can take some time. Instructions for Compiling the Ubuntu-raspi kernel can be found at https://askubuntu.com/a/1242267 and cross-compilation instructions can be found at https://github.com/carlonluca/docker-rpi-ubuntu-kernel Enabling the SATA ports requires compiling the SATA modules into the kernel. # Install dependencies sudo apt install -y git bc bison flex libssl-dev make libncurses5-dev # Clone source git clone --depth = 1 https://github.com/raspberrypi/linux # Apply default configuration cd linux export KERNEL = kernel8 # use kernel8 for 64-bit, or kernel7l for 32-bit make bcm2711_defconfig # Customize the .config further with menuconfig make menuconfig # Enable the following: # Device Drivers: # -> Serial ATA and Parallel ATA drivers (libata) # -> AHCI SATA support nano .config # (edit CONFIG_LOCALVERSION and add a suffix that helps you identify your build) # Build the kernel and copy everything into place make -j4 Image modules dtbs # 'zImage' on 32-bit sudo make modules_install sudo cp arch/arm64/boot/dts/*.dtb /boot/ sudo cp arch/arm64/boot/dts/overlays/*.dtb* /boot/overlays/ sudo cp arch/arm64/boot/dts/overlays/README /boot/overlays/ sudo cp arch/arm64/boot/Image /boot/ $KERNEL .img # Reboot the system reboot Further detailed instructions and discussion can be found on Jeff Geerling\u2019s PCI device guide on GitHub Optimize system for EMMC, RaspberryPI # We\u2019ll make a few tweaks intended to optimize disk-usage on the EMMC disk, which is the slowest component in the PiBox. These are optional steps. # Store system logs in memory, instead of writing to disk, and lower log verbosity sudo sed -i \"s/#Storage.*/Storage=volatile/\" /etc/systemd/journald.conf sudo sed -i 's/.MaxLevelStore.*/MaxLevelStore=info/' /etc/systemd/journald.conf sudo sed -i 's/.MaxLevelSyslog.*/MaxLevelSyslog=info/' /etc/systemd/journald.conf sudo systemctl restart systemd-journald.service # Disable swapfile - note that while you can use a swapspace on an SSD, Swap and Kubernetes do not play nicely for free. # So the simplest option is to just disable swap entirely swapoff -a dphys-swapfile swapoff # Mount /var/tmp as tmpfs filesystems to extend EMMC lifetime echo \"tmpfs /var/tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=1M 0 0\" | sudo tee -a /etc/fstab Enable support for \u2018.local\u2019 DNS Names # KubeSail agent will automatically publish DNS addresses for domains that end in .local to your network. This requires that that operating system that KubeSail Agent runs on has avahi-daemon installed and running. Note that this is typically installed on most major operating systems, but you can make sure with: apt install avahi-daemon Enabling the 1.3\u201d LCD display # You have 2 options for using the 1.3\u201d LCD Display: Use our pibox-framebuffer which binary draws basic stats like CPU and Memory info, along with providing a service to draw custom text and images. Use the Adafruit Python guide, which lets you customize the display with Python. This uses more CPU, but is also more flexible. To install the driver and our pibox-framebuffer binary: # Clone PiBox OS repo git clone https://github.com/kubesail/pibox-os.git # Enable Display Driver apt-get install raspberrypi-kernel-headers # For Raspbian / Pibox-OS, we need some additional drivers. pushd pibox-os/st7789_module make # If this command fails with \"/lib/modules/kernel-version not found\", please try rebooting to activate your current kernel! mv fb_st7789v.ko /lib/modules/ \" $( uname -r ) \" /kernel/drivers/staging/fbtft/fb_st7789v.ko popd dtc --warning no-unit_address_vs_reg -I dts -O dtb -o /boot/overlays/drm-minipitft13.dtbo pibox-os/overlays/minipitft13-overlay.dts cat <<EOF >> /boot/config.txt dtoverlay=spi0-1cs dtoverlay=dwc2,dr_mode=host hdmi_force_hotplug=1 dtoverlay=drm-minipitft13,rotate=0,fps=60 EOF Download pibox-framebuffer binary # curl -s https://raw.githubusercontent.com/kubesail/pibox-os/main/update-framebuffer.sh | sudo bash Modifying the image / stats shown on the display # Adafruit has a guide which is compatible with the display used in PiBox. We modified Adafruit\u2019s code in combination with prometheus-png to render stats to the display. This code runs as containers within Kubernetes, installed via this template , and the source code lives in two repositories: Our fork of prometheus-png built for arm64 arch: https://github.com/kubesail/prometheus-png Our python script to render the resulting PNGs to the display: https://github.com/kubesail/pibox-os/tree/main/lcd-display Note In our testing, if you are trying the Python \u201ceasy way\u201d, and installing the adafruit-circuitpython-rgb-display library, you will need to install RPi.GPIO manually via pip3. Once installed, you can try installing the Adafruit library again. CFLAGS = -fcommon pip3 install RPi.GPIO The complete script # For completeness, the script we use to pre-provision PiBox OS can be found on the PiBox-OS repository: provision-os.sh","title":"Operating System"},{"location":"guides/pibox/os/#using-a-custom-linux-os-on-your-pibox","text":"We maintain and distribute a modified 64-bit Raspberry Pi OS image which is pre-configured to be perfect for the PiBox. The rest of this page contains the instructions for making those modifications yourself if you decide to reflash your PiBox . In general, the modifications we make are: Fan support (PWM) for quiet fan operation SATA Kernel modules Install Kubernetes (via K3s ) Tweaks for stability and performance Display kernel modules for the 1.3\u201d front panel display If you\u2019re using our OS Image, this guide has already been completed for you ! You can also start with the base 64-bit Raspberry Pi image from https://downloads.raspberrypi.org/raspios_arm64","title":"Using a custom Linux OS on your PiBox"},{"location":"guides/pibox/os/#dedicating-an-ssd-to-kubernetes","text":"Important We recommend using one or more SSDs for your Kubernetes installation and storage. You\u2019ll want to format a disk and mount it at /var/snap before installing Kubernetes. This storage can then be used by Kubernetes for it\u2019s storage system. This piece is optional, but we strongly recommend it! Danger If you\u2019ve already installed K3s, please first uninstall with /usr/local/bin/k3s-uninstall.sh Take a look to see if your disks have been detected: lsblk | fgrep disk - if not, try updating the OS with apt update && apt upgrade and restart. If you still don\u2019t see your disks, see the \u201cEnabling the SATA Kernel Module\u201d section below. # Format the entire /dev/sda disk (WARNING! This will wipe data!) sudo parted -a opt /dev/sda mkpart primary ext4 0 % 100 % # Format the partition sudo mkfs.ext4 -L kubernetesdata /dev/sda1 # Mount the partition in place! K3s usually lives at \"/var/lib/rancher\", whereas microk8s uses \"/var/snap\" sudo mkdir -p /var/lib/rancher sudo bash -c \"echo '/dev/sda1 /var/lib/rancher ext4 defaults,nofail,noatime,discard,errors=remount-ro 0 0' >> /etc/fstab\"","title":"Dedicating an SSD to Kubernetes"},{"location":"guides/pibox/os/#install-k3s","text":"K3s is our preferred Kubernetes distribution. It\u2019s maintained by Rancher, is updated regularly, and performs well on low-power devices, such as Raspberry Pis. Other distributions of Kubernetes should work fine on the PiBox and with KubeSail.com, but this guide focuses on K3s. We recommend K3s over Microk8s because of its dramatically reduced resource requirements as of the time of writing (11/1/2021) # On Raspberry PI OS, the path is /boot/cmdline.txt, on Ubuntu it's /boot/firmware/cmdline.txt # TLDR: Add 'cgroup_enable=memory cgroup_memory=1' to that file and reboot sudo bash -c \"grep -qxF 'cgroup_enable=memory cgroup_memory=1' /boot/cmdline.txt || sed -i 's/ $ / cgroup_enable=memory cgroup_memory=1/' /boot/cmdline.txt\" sudo reboot # Install K3s - see https://k3s.io/ for more curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL = latest sh -","title":"Install K3s"},{"location":"guides/pibox/os/#enabling-pwm-fan-support","text":"The PiBox emits a PWM control signal so the fan only spins as fast as necessary. This makes it quieter than even the Official Raspberry Pi Case fan, and keeps the CPU from experiencing large temperature swings, which should lead to longer CPU life for your Pi. Typically this is done via a dedicated controller chip, however due to the ongoing chip shortage these chips are not possible to source. But thanks to some clever code from alwynallan on GitHub, we are able to ship a silent PiBox now, with no delays. This code can be found in our fork of alwynallan \u2018s original gist on GitHub. git clone https://github.com/kubesail/pibox-os.git cd pibox-os/pwm-fan tar zxvf bcm2835-1.68.tar.gz cd bcm2835-1.68 ./configure && make && sudo make install cd .. make && sudo make install","title":"Enabling PWM Fan Support"},{"location":"guides/pibox/os/#enable-usb-raspberry-pi-os-only","text":"If you are using Raspberry Pi OS, you will need to enable the USB 2.0 ports on the Compute Module 4. Edit the boot config file at /boot/config.txt and add: dtoverlay=dwc2,dr_mode=host","title":"Enable USB (Raspberry Pi OS only)"},{"location":"guides/pibox/os/#enabling-the-sata-kernel-module","text":"Important Raspberry Pi OS will soon ship the SATA modules by default. Use apt update && apt upgrade to upgrade! You may want to see if your disks are already detected ( lsblk | fgrep disk ) before building these modules, which can take some time. Instructions for Compiling the Ubuntu-raspi kernel can be found at https://askubuntu.com/a/1242267 and cross-compilation instructions can be found at https://github.com/carlonluca/docker-rpi-ubuntu-kernel Enabling the SATA ports requires compiling the SATA modules into the kernel. # Install dependencies sudo apt install -y git bc bison flex libssl-dev make libncurses5-dev # Clone source git clone --depth = 1 https://github.com/raspberrypi/linux # Apply default configuration cd linux export KERNEL = kernel8 # use kernel8 for 64-bit, or kernel7l for 32-bit make bcm2711_defconfig # Customize the .config further with menuconfig make menuconfig # Enable the following: # Device Drivers: # -> Serial ATA and Parallel ATA drivers (libata) # -> AHCI SATA support nano .config # (edit CONFIG_LOCALVERSION and add a suffix that helps you identify your build) # Build the kernel and copy everything into place make -j4 Image modules dtbs # 'zImage' on 32-bit sudo make modules_install sudo cp arch/arm64/boot/dts/*.dtb /boot/ sudo cp arch/arm64/boot/dts/overlays/*.dtb* /boot/overlays/ sudo cp arch/arm64/boot/dts/overlays/README /boot/overlays/ sudo cp arch/arm64/boot/Image /boot/ $KERNEL .img # Reboot the system reboot Further detailed instructions and discussion can be found on Jeff Geerling\u2019s PCI device guide on GitHub","title":"Enabling the SATA Kernel Module"},{"location":"guides/pibox/os/#optimize-system-for-emmc-raspberrypi","text":"We\u2019ll make a few tweaks intended to optimize disk-usage on the EMMC disk, which is the slowest component in the PiBox. These are optional steps. # Store system logs in memory, instead of writing to disk, and lower log verbosity sudo sed -i \"s/#Storage.*/Storage=volatile/\" /etc/systemd/journald.conf sudo sed -i 's/.MaxLevelStore.*/MaxLevelStore=info/' /etc/systemd/journald.conf sudo sed -i 's/.MaxLevelSyslog.*/MaxLevelSyslog=info/' /etc/systemd/journald.conf sudo systemctl restart systemd-journald.service # Disable swapfile - note that while you can use a swapspace on an SSD, Swap and Kubernetes do not play nicely for free. # So the simplest option is to just disable swap entirely swapoff -a dphys-swapfile swapoff # Mount /var/tmp as tmpfs filesystems to extend EMMC lifetime echo \"tmpfs /var/tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=1M 0 0\" | sudo tee -a /etc/fstab","title":"Optimize system for EMMC, RaspberryPI"},{"location":"guides/pibox/os/#enable-support-for-local-dns-names","text":"KubeSail agent will automatically publish DNS addresses for domains that end in .local to your network. This requires that that operating system that KubeSail Agent runs on has avahi-daemon installed and running. Note that this is typically installed on most major operating systems, but you can make sure with: apt install avahi-daemon","title":"Enable support for '.local' DNS Names"},{"location":"guides/pibox/os/#enabling-the-13-lcd-display","text":"You have 2 options for using the 1.3\u201d LCD Display: Use our pibox-framebuffer which binary draws basic stats like CPU and Memory info, along with providing a service to draw custom text and images. Use the Adafruit Python guide, which lets you customize the display with Python. This uses more CPU, but is also more flexible. To install the driver and our pibox-framebuffer binary: # Clone PiBox OS repo git clone https://github.com/kubesail/pibox-os.git # Enable Display Driver apt-get install raspberrypi-kernel-headers # For Raspbian / Pibox-OS, we need some additional drivers. pushd pibox-os/st7789_module make # If this command fails with \"/lib/modules/kernel-version not found\", please try rebooting to activate your current kernel! mv fb_st7789v.ko /lib/modules/ \" $( uname -r ) \" /kernel/drivers/staging/fbtft/fb_st7789v.ko popd dtc --warning no-unit_address_vs_reg -I dts -O dtb -o /boot/overlays/drm-minipitft13.dtbo pibox-os/overlays/minipitft13-overlay.dts cat <<EOF >> /boot/config.txt dtoverlay=spi0-1cs dtoverlay=dwc2,dr_mode=host hdmi_force_hotplug=1 dtoverlay=drm-minipitft13,rotate=0,fps=60 EOF","title":"Enabling the 1.3\" LCD display"},{"location":"guides/pibox/os/#download-pibox-framebuffer-binary","text":"curl -s https://raw.githubusercontent.com/kubesail/pibox-os/main/update-framebuffer.sh | sudo bash","title":"Download pibox-framebuffer binary"},{"location":"guides/pibox/os/#modifying-the-image-stats-shown-on-the-display","text":"Adafruit has a guide which is compatible with the display used in PiBox. We modified Adafruit\u2019s code in combination with prometheus-png to render stats to the display. This code runs as containers within Kubernetes, installed via this template , and the source code lives in two repositories: Our fork of prometheus-png built for arm64 arch: https://github.com/kubesail/prometheus-png Our python script to render the resulting PNGs to the display: https://github.com/kubesail/pibox-os/tree/main/lcd-display Note In our testing, if you are trying the Python \u201ceasy way\u201d, and installing the adafruit-circuitpython-rgb-display library, you will need to install RPi.GPIO manually via pip3. Once installed, you can try installing the Adafruit library again. CFLAGS = -fcommon pip3 install RPi.GPIO","title":"Modifying the image / stats shown on the display"},{"location":"guides/pibox/os/#the-complete-script","text":"For completeness, the script we use to pre-provision PiBox OS can be found on the PiBox-OS repository: provision-os.sh","title":"The complete script"},{"location":"guides/pibox/reset/","text":"Factory Reset # Reset containerd # Ocassionally, k3s can get into a state where it is not in sync with the underlying container system (containerd). This is the first and least obtrusive debugging step. for i in $ ( sudo k3s ctr c ls | awk '{print $1}' ) ; do sudo k3s ctr c rm $i; done sudo service k3s restart Reset Kubernetes (most common) # You can use these commands to reset your Kubernetes (K3s) installation to the factory defaults: /usr/local/bin/k3s-uninstall.sh curl --connect-timeout 10 --retry 5 --retry-delay 3 -L https://get.k3s.io | INSTALL_K3S_CHANNEL = stable INSTALL_K3S_EXEC = \"server --cluster-cidr=172.30.0.0/16 --service-cidr=172.31.0.0/16 --disable=traefik --kubelet-arg container-log-max-files=3 --kubelet-arg container-log-max-size=10Mi --disable-network-policy\" sh sudo kubectl create -f https://api.kubesail.com/byoc Then scan the QR code on the screen to set up your PiBox as if it were new. Full reflash # This method is rarely needed and involves opening your hardware to reflash the Pi\u2019s onboard flash. However, if you want to fully reset your PiBox, you can follow the instructions on the rpiboot page. You may want to first remove your disks from the LVM so your PiBox can format them the next time it boots: Warning These commands will delete ALL data on your disks! Proceed with caution! service k3s stop killall containerd-shim umount /var/lib/rancher umount /var/lib/rancher-ssd wipefs -af /dev/pibox-group/k3s lvremove /dev/pibox-group/k3s vgreduce --removemissing pibox-group vgremove pibox-group pvremove /dev/sda1 pvremove /dev/sdb1 wipefs -a /dev/sda1 wipefs -a /dev/sdb1 sfdisk --delete /dev/sda 1 sfdisk --delete /dev/sdb 1 wipefs -a /dev/sda wipefs -a /dev/sdb","title":"Factory Reset"},{"location":"guides/pibox/reset/#factory-reset","text":"","title":"Factory Reset"},{"location":"guides/pibox/reset/#reset-containerd","text":"Ocassionally, k3s can get into a state where it is not in sync with the underlying container system (containerd). This is the first and least obtrusive debugging step. for i in $ ( sudo k3s ctr c ls | awk '{print $1}' ) ; do sudo k3s ctr c rm $i; done sudo service k3s restart","title":"Reset containerd"},{"location":"guides/pibox/reset/#reset-kubernetes-most-common","text":"You can use these commands to reset your Kubernetes (K3s) installation to the factory defaults: /usr/local/bin/k3s-uninstall.sh curl --connect-timeout 10 --retry 5 --retry-delay 3 -L https://get.k3s.io | INSTALL_K3S_CHANNEL = stable INSTALL_K3S_EXEC = \"server --cluster-cidr=172.30.0.0/16 --service-cidr=172.31.0.0/16 --disable=traefik --kubelet-arg container-log-max-files=3 --kubelet-arg container-log-max-size=10Mi --disable-network-policy\" sh sudo kubectl create -f https://api.kubesail.com/byoc Then scan the QR code on the screen to set up your PiBox as if it were new.","title":"Reset Kubernetes (most common)"},{"location":"guides/pibox/reset/#full-reflash","text":"This method is rarely needed and involves opening your hardware to reflash the Pi\u2019s onboard flash. However, if you want to fully reset your PiBox, you can follow the instructions on the rpiboot page. You may want to first remove your disks from the LVM so your PiBox can format them the next time it boots: Warning These commands will delete ALL data on your disks! Proceed with caution! service k3s stop killall containerd-shim umount /var/lib/rancher umount /var/lib/rancher-ssd wipefs -af /dev/pibox-group/k3s lvremove /dev/pibox-group/k3s vgreduce --removemissing pibox-group vgremove pibox-group pvremove /dev/sda1 pvremove /dev/sdb1 wipefs -a /dev/sda1 wipefs -a /dev/sdb1 sfdisk --delete /dev/sda 1 sfdisk --delete /dev/sdb 1 wipefs -a /dev/sda wipefs -a /dev/sdb","title":"Full reflash"},{"location":"guides/pibox/rpiboot/","text":"Flashing your PiBox # The PiBox is built around the Raspberry Pi 4 Compute Module . The Compute Module has two options for boot storage: SD card or onboard flash (eMMC). You can use this guide to flash your Pi\u2019s eMMC. Note Unless you ordered your PiBox with no Compute Module (advanced users), then you received a PiBox with eMMC and an OS pre-installed. You can use to use this guide to re-flash it. We only ship modules with onboard flash due to its substantially faster performance. Installing the rpiboot tool # In order to re-flash the boot disk on the pi (commonly called eMMC), you will need to install a utility called rpiboot . For Windows users, install the rpiboot installer . For Mac & Linux users, follow the build instructions and return to this page. Installing the Raspberry Pi Imager # Raspberry Pi maintains an excellent utility for flashing devices on every OS. Download and install it here: https://www.raspberrypi.org/software/ Flashing the Image # Open the PiBox using the two screws on the back. The top clamshell case slides back and lifts up to reveal the Carrier board (large horizontal PCB) and the Backplane (small vertical PCB in front) Disconnect the PiBox\u2019s Carrier board from the Backplane. Push up in the middle & bottom side of the SSD tray. This relieves the pressure on the circuit board from the side tabs. Push up on either side of the circuit board to wiggle it free from the tabs. Lift the Carrier board to a ~15 degree angle Pull the Carrier board straight out of the backplane Switch the \u201cBoot Mode\u201d switch on the Carrier to \u201c rpiboot \u201d. Connect a USB-C cable to the USB-C port on the backplane, and to your PC. Run sudo ./rpiboot (Mac / Linux) or the RpiBoot executable at C:\\Program Files (x86)\\Raspberry Pi\\RPiBoot.exe (Windows). This will turn your Pi\u2019s eMMC into a mass storage device, allowing you to write the OS directly to the eMMC. Open the Raspberry Pi Imager Select an OS Download our latest OS image from GitHub Or, flash your own OS. We recommend starting with Raspberry Pi OS 64-bit Choose RPi-MSD- 0001 as your storage location. Click Write . You may want to touch the file /boot/ssh to enable SSH when the pibox boots - otherwise you will need a keyboard & monitor If using our image, you may also write your username to /boot/github-ssh-username.txt , and your GitHub SSH keys will be automatically copied for easier log-in. Flip the \u201cBoot Mode\u201d switch on the Carrier back to normal Unplug the carrier from your PC and re-assemble the PiBox. Warning The USB port and / or cable you use are using may affect the ability to boot into rpiboot mode successfully. If rpiboot stalls or you seen an error code like Failed to write correct length, returned -9 , then try plugging into a different port on your PC, or swapping out the cable you are using. Enabling USB, SATA, and Display support # If you aren\u2019t flashing one of our pre-built images, you will need to make some modifications to your installation to get full use out of the PiBox hardware. See the Operating System page for instructions.","title":"Flashing with rpiboot"},{"location":"guides/pibox/rpiboot/#flashing-your-pibox","text":"The PiBox is built around the Raspberry Pi 4 Compute Module . The Compute Module has two options for boot storage: SD card or onboard flash (eMMC). You can use this guide to flash your Pi\u2019s eMMC. Note Unless you ordered your PiBox with no Compute Module (advanced users), then you received a PiBox with eMMC and an OS pre-installed. You can use to use this guide to re-flash it. We only ship modules with onboard flash due to its substantially faster performance.","title":"Flashing your PiBox"},{"location":"guides/pibox/rpiboot/#installing-the-rpiboot-tool","text":"In order to re-flash the boot disk on the pi (commonly called eMMC), you will need to install a utility called rpiboot . For Windows users, install the rpiboot installer . For Mac & Linux users, follow the build instructions and return to this page.","title":"Installing the rpiboot tool"},{"location":"guides/pibox/rpiboot/#installing-the-raspberry-pi-imager","text":"Raspberry Pi maintains an excellent utility for flashing devices on every OS. Download and install it here: https://www.raspberrypi.org/software/","title":"Installing the Raspberry Pi Imager"},{"location":"guides/pibox/rpiboot/#flashing-the-image","text":"Open the PiBox using the two screws on the back. The top clamshell case slides back and lifts up to reveal the Carrier board (large horizontal PCB) and the Backplane (small vertical PCB in front) Disconnect the PiBox\u2019s Carrier board from the Backplane. Push up in the middle & bottom side of the SSD tray. This relieves the pressure on the circuit board from the side tabs. Push up on either side of the circuit board to wiggle it free from the tabs. Lift the Carrier board to a ~15 degree angle Pull the Carrier board straight out of the backplane Switch the \u201cBoot Mode\u201d switch on the Carrier to \u201c rpiboot \u201d. Connect a USB-C cable to the USB-C port on the backplane, and to your PC. Run sudo ./rpiboot (Mac / Linux) or the RpiBoot executable at C:\\Program Files (x86)\\Raspberry Pi\\RPiBoot.exe (Windows). This will turn your Pi\u2019s eMMC into a mass storage device, allowing you to write the OS directly to the eMMC. Open the Raspberry Pi Imager Select an OS Download our latest OS image from GitHub Or, flash your own OS. We recommend starting with Raspberry Pi OS 64-bit Choose RPi-MSD- 0001 as your storage location. Click Write . You may want to touch the file /boot/ssh to enable SSH when the pibox boots - otherwise you will need a keyboard & monitor If using our image, you may also write your username to /boot/github-ssh-username.txt , and your GitHub SSH keys will be automatically copied for easier log-in. Flip the \u201cBoot Mode\u201d switch on the Carrier back to normal Unplug the carrier from your PC and re-assemble the PiBox. Warning The USB port and / or cable you use are using may affect the ability to boot into rpiboot mode successfully. If rpiboot stalls or you seen an error code like Failed to write correct length, returned -9 , then try plugging into a different port on your PC, or swapping out the cable you are using.","title":"Flashing the Image"},{"location":"guides/pibox/rpiboot/#enabling-usb-sata-and-display-support","text":"If you aren\u2019t flashing one of our pre-built images, you will need to make some modifications to your installation to get full use out of the PiBox hardware. See the Operating System page for instructions.","title":"Enabling USB, SATA, and Display support"}]}